<?xml version="1.0" encoding="utf-8"?>
<views MappingHash="0f5ea0c613ac8c3dd60396b8971ae7acc1ae50abe715f345f74c9953ac3eb447">
  <view extent="CodeFirstDatabase.DocumentImage"><![CDATA[
    SELECT VALUE -- Constructing DocumentImage
        [CodeFirstDatabaseSchema.DocumentImage](T1.DocumentImage_DocumentImageId, T1.DocumentImage_ServiceDocumentId, T1.DocumentImage_FileName, T1.DocumentImage_MimeType, T1.DocumentImage_ImageData)
    FROM (
        SELECT 
            T.DocumentImageId AS DocumentImage_DocumentImageId, 
            T.ServiceDocumentId AS DocumentImage_ServiceDocumentId, 
            T.FileName AS DocumentImage_FileName, 
            T.MimeType AS DocumentImage_MimeType, 
            T.ImageData AS DocumentImage_ImageData, 
            True AS _from0
        FROM DocumentContext.DocumentImages AS T
    ) AS T1]]></view>
  <view extent="CodeFirstDatabase.DocumentLogOperation"><![CDATA[
    SELECT VALUE -- Constructing DocumentLogOperation
        [CodeFirstDatabaseSchema.DocumentLogOperation](T1.DocumentLogOperation_DocumentLogOperationId, T1.DocumentLogOperation_ServiceDocumentId, T1.DocumentLogOperation_OperationType, T1.DocumentLogOperation_OperationDate, T1.DocumentLogOperation_ConnectionIpAddress, T1.DocumentLogOperation_Info)
    FROM (
        SELECT 
            T.DocumentLogOperationId AS DocumentLogOperation_DocumentLogOperationId, 
            T.ServiceDocumentId AS DocumentLogOperation_ServiceDocumentId, 
            CAST(T.OperationType AS [Edm.Int32]) AS DocumentLogOperation_OperationType, 
            T.OperationDate AS DocumentLogOperation_OperationDate, 
            T.ConnectionIpAddress AS DocumentLogOperation_ConnectionIpAddress, 
            T.Info AS DocumentLogOperation_Info, 
            True AS _from0
        FROM DocumentContext.DocumentsLogs AS T
    ) AS T1]]></view>
  <view extent="CodeFirstDatabase.ServiceDocument"><![CDATA[
    SELECT VALUE -- Constructing ServiceDocument
        [CodeFirstDatabaseSchema.ServiceDocument](T1.ServiceDocument_ServiceDocumentId, T1.ServiceDocument_NeuronDbDocumentId, T1.ServiceDocument_Name, T1.ServiceDocument_DeliveryEMail, T1.ServiceDocument_DeliveryPhone, T1.ServiceDocument_CreatDate, T1.ServiceDocument_PdfFileData, T1.ServiceDocument_ImageData, T1.ServiceDocument_IsImagesInZip, T1.ServiceDocument_IsBlocked, T1.ServiceDocument_FailedTimes, T1.ServiceDocument_IsOpened, T1.ServiceDocument_OpenDate, T1.ServiceDocument_Status, T1.ServiceDocument_PublishId, T1.ServiceDocument_PublishPassword)
    FROM (
        SELECT 
            T.ServiceDocumentId AS ServiceDocument_ServiceDocumentId, 
            T.NeuronDbDocumentId AS ServiceDocument_NeuronDbDocumentId, 
            T.Name AS ServiceDocument_Name, 
            T.DeliveryEMail AS ServiceDocument_DeliveryEMail, 
            T.DeliveryPhone AS ServiceDocument_DeliveryPhone, 
            T.CreatDate AS ServiceDocument_CreatDate, 
            T.PdfFileData AS ServiceDocument_PdfFileData, 
            T.ImageData AS ServiceDocument_ImageData, 
            T.IsImagesInZip AS ServiceDocument_IsImagesInZip, 
            T.IsBlocked AS ServiceDocument_IsBlocked, 
            T.FailedTimes AS ServiceDocument_FailedTimes, 
            T.IsOpened AS ServiceDocument_IsOpened, 
            T.OpenDate AS ServiceDocument_OpenDate, 
            CAST(T.Status AS [Edm.Int32]) AS ServiceDocument_Status, 
            T.PublishId AS ServiceDocument_PublishId, 
            T.PublishPassword AS ServiceDocument_PublishPassword, 
            True AS _from0
        FROM DocumentContext.ServiceDocuments AS T
    ) AS T1]]></view>
  <view extent="DocumentContext.DocumentImages"><![CDATA[
    SELECT VALUE -- Constructing DocumentImages
        [NeuronExportedDocuments.DAL.DocumentImage](T1.DocumentImage_DocumentImageId, T1.DocumentImage_ServiceDocumentId, T1.DocumentImage_FileName, T1.DocumentImage_MimeType, T1.DocumentImage_ImageData)
    FROM (
        SELECT 
            T.DocumentImageId AS DocumentImage_DocumentImageId, 
            T.ServiceDocumentId AS DocumentImage_ServiceDocumentId, 
            T.FileName AS DocumentImage_FileName, 
            T.MimeType AS DocumentImage_MimeType, 
            T.ImageData AS DocumentImage_ImageData, 
            True AS _from0
        FROM CodeFirstDatabase.DocumentImage AS T
    ) AS T1]]></view>
  <view extent="DocumentContext.DocumentsLogs"><![CDATA[
    SELECT VALUE -- Constructing DocumentsLogs
        [NeuronExportedDocuments.DAL.DocumentLogOperation](T1.DocumentLogOperation_DocumentLogOperationId, T1.DocumentLogOperation_ServiceDocumentId, T1.DocumentLogOperation_OperationType, T1.DocumentLogOperation_OperationDate, T1.DocumentLogOperation_ConnectionIpAddress, T1.DocumentLogOperation_Info)
    FROM (
        SELECT 
            T.DocumentLogOperationId AS DocumentLogOperation_DocumentLogOperationId, 
            T.ServiceDocumentId AS DocumentLogOperation_ServiceDocumentId, 
            CAST(T.OperationType AS [NeuronExportedDocuments.DAL.DocumentLogOperationType]) AS DocumentLogOperation_OperationType, 
            T.OperationDate AS DocumentLogOperation_OperationDate, 
            T.ConnectionIpAddress AS DocumentLogOperation_ConnectionIpAddress, 
            T.Info AS DocumentLogOperation_Info, 
            True AS _from0
        FROM CodeFirstDatabase.DocumentLogOperation AS T
    ) AS T1]]></view>
  <view extent="DocumentContext.ServiceDocuments"><![CDATA[
    SELECT VALUE -- Constructing ServiceDocuments
        [NeuronExportedDocuments.DAL.ServiceDocument](T1.ServiceDocument_ServiceDocumentId, T1.ServiceDocument_NeuronDbDocumentId, T1.ServiceDocument_Name, T1.ServiceDocument_DeliveryEMail, T1.ServiceDocument_DeliveryPhone, T1.ServiceDocument_CreatDate, T1.ServiceDocument_PdfFileData, T1.ServiceDocument_ImageData, T1.ServiceDocument_IsImagesInZip, T1.ServiceDocument_IsBlocked, T1.ServiceDocument_FailedTimes, T1.ServiceDocument_IsOpened, T1.ServiceDocument_OpenDate, T1.ServiceDocument_Status, T1.ServiceDocument_PublishId, T1.ServiceDocument_PublishPassword)
    FROM (
        SELECT 
            T.ServiceDocumentId AS ServiceDocument_ServiceDocumentId, 
            T.NeuronDbDocumentId AS ServiceDocument_NeuronDbDocumentId, 
            T.Name AS ServiceDocument_Name, 
            T.DeliveryEMail AS ServiceDocument_DeliveryEMail, 
            T.DeliveryPhone AS ServiceDocument_DeliveryPhone, 
            T.CreatDate AS ServiceDocument_CreatDate, 
            T.PdfFileData AS ServiceDocument_PdfFileData, 
            T.ImageData AS ServiceDocument_ImageData, 
            T.IsImagesInZip AS ServiceDocument_IsImagesInZip, 
            T.IsBlocked AS ServiceDocument_IsBlocked, 
            T.FailedTimes AS ServiceDocument_FailedTimes, 
            T.IsOpened AS ServiceDocument_IsOpened, 
            T.OpenDate AS ServiceDocument_OpenDate, 
            CAST(T.Status AS [NeuronExportedDocuments.DAL.ExportedDocStatus]) AS ServiceDocument_Status, 
            T.PublishId AS ServiceDocument_PublishId, 
            T.PublishPassword AS ServiceDocument_PublishPassword, 
            True AS _from0
        FROM CodeFirstDatabase.ServiceDocument AS T
    ) AS T1]]></view>
  <view extent="CodeFirstDatabase.NLogError"><![CDATA[
    SELECT VALUE -- Constructing NLogError
        [CodeFirstDatabaseSchema.NLogError](T1.NLogError_Id, T1.NLogError_RecordTime, T1.NLogError_Host, T1.NLogError_Type, T1.NLogError_Source, T1.NLogError_Message, T1.NLogError_Level, T1.NLogError_Logger, T1.NLogError_Stacktrace, T1.NLogError_AllXml, T1.NLogError_TimeStamp)
    FROM (
        SELECT 
            T.Id AS NLogError_Id, 
            T.RecordTime AS NLogError_RecordTime, 
            T.Host AS NLogError_Host, 
            T.Type AS NLogError_Type, 
            T.Source AS NLogError_Source, 
            T.Message AS NLogError_Message, 
            T.Level AS NLogError_Level, 
            T.Logger AS NLogError_Logger, 
            T.Stacktrace AS NLogError_Stacktrace, 
            T.AllXml AS NLogError_AllXml, 
            T.TimeStamp AS NLogError_TimeStamp, 
            True AS _from0
        FROM DocumentContext.NLogErrors AS T
    ) AS T1]]></view>
  <view extent="DocumentContext.NLogErrors"><![CDATA[
    SELECT VALUE -- Constructing NLogErrors
        [NeuronExportedDocuments.DAL.NLogError](T1.NLogError_Id, T1.NLogError_RecordTime, T1.NLogError_Host, T1.NLogError_Type, T1.NLogError_Source, T1.NLogError_Message, T1.NLogError_Level, T1.NLogError_Logger, T1.NLogError_Stacktrace, T1.NLogError_AllXml, T1.NLogError_TimeStamp)
    FROM (
        SELECT 
            T.Id AS NLogError_Id, 
            T.RecordTime AS NLogError_RecordTime, 
            T.Host AS NLogError_Host, 
            T.Type AS NLogError_Type, 
            T.Source AS NLogError_Source, 
            T.Message AS NLogError_Message, 
            T.Level AS NLogError_Level, 
            T.Logger AS NLogError_Logger, 
            T.Stacktrace AS NLogError_Stacktrace, 
            T.AllXml AS NLogError_AllXml, 
            T.TimeStamp AS NLogError_TimeStamp, 
            True AS _from0
        FROM CodeFirstDatabase.NLogError AS T
    ) AS T1]]></view>
  <view extent="CodeFirstDatabase.IdentityRole"><![CDATA[
    SELECT VALUE -- Constructing IdentityRole
        [CodeFirstDatabaseSchema.IdentityRole](T1.IdentityRole_Id, T1.IdentityRole_Name)
    FROM (
        SELECT 
            T.Id AS IdentityRole_Id, 
            T.Name AS IdentityRole_Name, 
            True AS _from0
        FROM DocumentContext.Roles AS T
    ) AS T1]]></view>
  <view extent="CodeFirstDatabase.IdentityUserRole"><![CDATA[
    SELECT VALUE -- Constructing IdentityUserRole
        [CodeFirstDatabaseSchema.IdentityUserRole](T1.IdentityUserRole_UserId, T1.IdentityUserRole_RoleId)
    FROM (
        SELECT 
            T.UserId AS IdentityUserRole_UserId, 
            T.RoleId AS IdentityUserRole_RoleId, 
            True AS _from0
        FROM DocumentContext.IdentityUserRoles AS T
    ) AS T1]]></view>
  <view extent="CodeFirstDatabase.ApplicationUser"><![CDATA[
    SELECT VALUE -- Constructing ApplicationUser
        [CodeFirstDatabaseSchema.ApplicationUser](T1.ApplicationUser_Id, T1.ApplicationUser_Email, T1.ApplicationUser_EmailConfirmed, T1.ApplicationUser_PasswordHash, T1.ApplicationUser_SecurityStamp, T1.ApplicationUser_PhoneNumber, T1.ApplicationUser_PhoneNumberConfirmed, T1.ApplicationUser_TwoFactorEnabled, T1.ApplicationUser_LockoutEndDateUtc, T1.ApplicationUser_LockoutEnabled, T1.ApplicationUser_AccessFailedCount, T1.ApplicationUser_UserName)
    FROM (
        SELECT 
            T.Id AS ApplicationUser_Id, 
            T.Email AS ApplicationUser_Email, 
            T.EmailConfirmed AS ApplicationUser_EmailConfirmed, 
            T.PasswordHash AS ApplicationUser_PasswordHash, 
            T.SecurityStamp AS ApplicationUser_SecurityStamp, 
            T.PhoneNumber AS ApplicationUser_PhoneNumber, 
            T.PhoneNumberConfirmed AS ApplicationUser_PhoneNumberConfirmed, 
            T.TwoFactorEnabled AS ApplicationUser_TwoFactorEnabled, 
            T.LockoutEndDateUtc AS ApplicationUser_LockoutEndDateUtc, 
            T.LockoutEnabled AS ApplicationUser_LockoutEnabled, 
            T.AccessFailedCount AS ApplicationUser_AccessFailedCount, 
            T.UserName AS ApplicationUser_UserName, 
            True AS _from0
        FROM DocumentContext.Users AS T
    ) AS T1]]></view>
  <view extent="CodeFirstDatabase.IdentityUserClaim"><![CDATA[
    SELECT VALUE -- Constructing IdentityUserClaim
        [CodeFirstDatabaseSchema.IdentityUserClaim](T1.IdentityUserClaim_Id, T1.IdentityUserClaim_UserId, T1.IdentityUserClaim_ClaimType, T1.IdentityUserClaim_ClaimValue)
    FROM (
        SELECT 
            T.Id AS IdentityUserClaim_Id, 
            T.UserId AS IdentityUserClaim_UserId, 
            T.ClaimType AS IdentityUserClaim_ClaimType, 
            T.ClaimValue AS IdentityUserClaim_ClaimValue, 
            True AS _from0
        FROM DocumentContext.IdentityUserClaims AS T
    ) AS T1]]></view>
  <view extent="CodeFirstDatabase.IdentityUserLogin"><![CDATA[
    SELECT VALUE -- Constructing IdentityUserLogin
        [CodeFirstDatabaseSchema.IdentityUserLogin](T1.IdentityUserLogin_LoginProvider, T1.IdentityUserLogin_ProviderKey, T1.IdentityUserLogin_UserId)
    FROM (
        SELECT 
            T.LoginProvider AS IdentityUserLogin_LoginProvider, 
            T.ProviderKey AS IdentityUserLogin_ProviderKey, 
            T.UserId AS IdentityUserLogin_UserId, 
            True AS _from0
        FROM DocumentContext.IdentityUserLogins AS T
    ) AS T1]]></view>
  <view extent="DocumentContext.Roles"><![CDATA[
    SELECT VALUE -- Constructing Roles
        [NeuronExportedDocuments.DAL.IdentityRole](T1.IdentityRole_Id, T1.IdentityRole_Name)
    FROM (
        SELECT 
            T.Id AS IdentityRole_Id, 
            T.Name AS IdentityRole_Name, 
            True AS _from0
        FROM CodeFirstDatabase.IdentityRole AS T
    ) AS T1]]></view>
  <view extent="DocumentContext.IdentityUserRoles"><![CDATA[
    SELECT VALUE -- Constructing IdentityUserRoles
        [NeuronExportedDocuments.DAL.IdentityUserRole](T1.IdentityUserRole_UserId, T1.IdentityUserRole_RoleId)
    FROM (
        SELECT 
            T.UserId AS IdentityUserRole_UserId, 
            T.RoleId AS IdentityUserRole_RoleId, 
            True AS _from0
        FROM CodeFirstDatabase.IdentityUserRole AS T
    ) AS T1]]></view>
  <view extent="DocumentContext.Users"><![CDATA[
    SELECT VALUE -- Constructing Users
        [NeuronExportedDocuments.DAL.ApplicationUser](T1.ApplicationUser_Id, T1.ApplicationUser_Email, T1.ApplicationUser_EmailConfirmed, T1.ApplicationUser_PasswordHash, T1.ApplicationUser_SecurityStamp, T1.ApplicationUser_PhoneNumber, T1.ApplicationUser_PhoneNumberConfirmed, T1.ApplicationUser_TwoFactorEnabled, T1.ApplicationUser_LockoutEndDateUtc, T1.ApplicationUser_LockoutEnabled, T1.ApplicationUser_AccessFailedCount, T1.ApplicationUser_UserName)
    FROM (
        SELECT 
            T.Id AS ApplicationUser_Id, 
            T.Email AS ApplicationUser_Email, 
            T.EmailConfirmed AS ApplicationUser_EmailConfirmed, 
            T.PasswordHash AS ApplicationUser_PasswordHash, 
            T.SecurityStamp AS ApplicationUser_SecurityStamp, 
            T.PhoneNumber AS ApplicationUser_PhoneNumber, 
            T.PhoneNumberConfirmed AS ApplicationUser_PhoneNumberConfirmed, 
            T.TwoFactorEnabled AS ApplicationUser_TwoFactorEnabled, 
            T.LockoutEndDateUtc AS ApplicationUser_LockoutEndDateUtc, 
            T.LockoutEnabled AS ApplicationUser_LockoutEnabled, 
            T.AccessFailedCount AS ApplicationUser_AccessFailedCount, 
            T.UserName AS ApplicationUser_UserName, 
            True AS _from0
        FROM CodeFirstDatabase.ApplicationUser AS T
    ) AS T1]]></view>
  <view extent="DocumentContext.IdentityUserClaims"><![CDATA[
    SELECT VALUE -- Constructing IdentityUserClaims
        [NeuronExportedDocuments.DAL.IdentityUserClaim](T1.IdentityUserClaim_Id, T1.IdentityUserClaim_UserId, T1.IdentityUserClaim_ClaimType, T1.IdentityUserClaim_ClaimValue)
    FROM (
        SELECT 
            T.Id AS IdentityUserClaim_Id, 
            T.UserId AS IdentityUserClaim_UserId, 
            T.ClaimType AS IdentityUserClaim_ClaimType, 
            T.ClaimValue AS IdentityUserClaim_ClaimValue, 
            True AS _from0
        FROM CodeFirstDatabase.IdentityUserClaim AS T
    ) AS T1]]></view>
  <view extent="DocumentContext.IdentityUserLogins"><![CDATA[
    SELECT VALUE -- Constructing IdentityUserLogins
        [NeuronExportedDocuments.DAL.IdentityUserLogin](T1.IdentityUserLogin_LoginProvider, T1.IdentityUserLogin_ProviderKey, T1.IdentityUserLogin_UserId)
    FROM (
        SELECT 
            T.LoginProvider AS IdentityUserLogin_LoginProvider, 
            T.ProviderKey AS IdentityUserLogin_ProviderKey, 
            T.UserId AS IdentityUserLogin_UserId, 
            True AS _from0
        FROM CodeFirstDatabase.IdentityUserLogin AS T
    ) AS T1]]></view>
  <view extent="CodeFirstDatabase.ServiceMessage"><![CDATA[
    SELECT VALUE -- Constructing ServiceMessage
        [CodeFirstDatabaseSchema.ServiceMessage](T1.ServiceMessage_ServiceMessageId, T1.ServiceMessage_Key, T1.ServiceMessage_Message, T1.ServiceMessage_IsDefault)
    FROM (
        SELECT 
            T.ServiceMessageId AS ServiceMessage_ServiceMessageId, 
            CAST(T.[Key] AS [Edm.Int32]) AS ServiceMessage_Key, 
            T.Message AS ServiceMessage_Message, 
            T.IsDefault AS ServiceMessage_IsDefault, 
            True AS _from0
        FROM DocumentContext.ServiceMessages AS T
    ) AS T1]]></view>
  <view extent="DocumentContext.ServiceMessages"><![CDATA[
    SELECT VALUE -- Constructing ServiceMessages
        [NeuronExportedDocuments.DAL.ServiceMessage](T1.ServiceMessage_ServiceMessageId, T1.ServiceMessage_Key, T1.ServiceMessage_Message, T1.ServiceMessage_IsDefault)
    FROM (
        SELECT 
            T.ServiceMessageId AS ServiceMessage_ServiceMessageId, 
            CAST(T.[Key] AS [NeuronExportedDocuments.DAL.ServiceMessageKey]) AS ServiceMessage_Key, 
            T.Message AS ServiceMessage_Message, 
            T.IsDefault AS ServiceMessage_IsDefault, 
            True AS _from0
        FROM CodeFirstDatabase.ServiceMessage AS T
    ) AS T1]]></view>
</views>