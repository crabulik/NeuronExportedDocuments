<?xml version="1.0" encoding="utf-8"?>
<views MappingHash="735d0b94a740b1041218a2bdc5477a9a2b1602d33d7cc28f55877e62b2ee2cbb">
  <view extent="CodeFirstDatabase.DocumentImage"><![CDATA[
    SELECT VALUE -- Constructing DocumentImage
        [CodeFirstDatabaseSchema.DocumentImage](T1.DocumentImage_DocumentImageId, T1.DocumentImage_ServiceDocumentId, T1.DocumentImage_FileName, T1.DocumentImage_MimeType, T1.DocumentImage_ImageData)
    FROM (
        SELECT 
            T.DocumentImageId AS DocumentImage_DocumentImageId, 
            T.ServiceDocumentId AS DocumentImage_ServiceDocumentId, 
            T.FileName AS DocumentImage_FileName, 
            T.MimeType AS DocumentImage_MimeType, 
            T.ImageData AS DocumentImage_ImageData, 
            True AS _from0
        FROM DocumentContext.DocumentImages AS T
    ) AS T1]]></view>
  <view extent="CodeFirstDatabase.ServiceDocument"><![CDATA[
    SELECT VALUE -- Constructing ServiceDocument
        [CodeFirstDatabaseSchema.ServiceDocument](T1.ServiceDocument_ServiceDocumentId, T1.ServiceDocument_NeuronDbDocumentId, T1.ServiceDocument_Name, T1.ServiceDocument_DeliveryEMail, T1.ServiceDocument_DeliveryPhone, T1.ServiceDocument_CreatDate, T1.ServiceDocument_PdfFileData, T1.ServiceDocument_ImageData, T1.ServiceDocument_IsImagesInZip, T1.ServiceDocument_IsBlocked, T1.ServiceDocument_FailedTimes, T1.ServiceDocument_IsOpened, T1.ServiceDocument_OpenDate, T1.ServiceDocument_Status, T1.ServiceDocument_PublishId, T1.ServiceDocument_PublishPassword)
    FROM (
        SELECT 
            T.ServiceDocumentId AS ServiceDocument_ServiceDocumentId, 
            T.NeuronDbDocumentId AS ServiceDocument_NeuronDbDocumentId, 
            T.Name AS ServiceDocument_Name, 
            T.DeliveryEMail AS ServiceDocument_DeliveryEMail, 
            T.DeliveryPhone AS ServiceDocument_DeliveryPhone, 
            T.CreatDate AS ServiceDocument_CreatDate, 
            T.PdfFileData AS ServiceDocument_PdfFileData, 
            T.ImageData AS ServiceDocument_ImageData, 
            T.IsImagesInZip AS ServiceDocument_IsImagesInZip, 
            T.IsBlocked AS ServiceDocument_IsBlocked, 
            T.FailedTimes AS ServiceDocument_FailedTimes, 
            T.IsOpened AS ServiceDocument_IsOpened, 
            T.OpenDate AS ServiceDocument_OpenDate, 
            CAST(T.Status AS [Edm.Int32]) AS ServiceDocument_Status, 
            T.PublishId AS ServiceDocument_PublishId, 
            T.PublishPassword AS ServiceDocument_PublishPassword, 
            True AS _from0
        FROM DocumentContext.ServiceDocuments AS T
    ) AS T1]]></view>
  <view extent="DocumentContext.DocumentImages"><![CDATA[
    SELECT VALUE -- Constructing DocumentImages
        [NeuronExportedDocuments.DAL.DocumentImage](T1.DocumentImage_DocumentImageId, T1.DocumentImage_ServiceDocumentId, T1.DocumentImage_FileName, T1.DocumentImage_MimeType, T1.DocumentImage_ImageData)
    FROM (
        SELECT 
            T.DocumentImageId AS DocumentImage_DocumentImageId, 
            T.ServiceDocumentId AS DocumentImage_ServiceDocumentId, 
            T.FileName AS DocumentImage_FileName, 
            T.MimeType AS DocumentImage_MimeType, 
            T.ImageData AS DocumentImage_ImageData, 
            True AS _from0
        FROM CodeFirstDatabase.DocumentImage AS T
    ) AS T1]]></view>
  <view extent="DocumentContext.ServiceDocuments"><![CDATA[
    SELECT VALUE -- Constructing ServiceDocuments
        [NeuronExportedDocuments.DAL.ServiceDocument](T1.ServiceDocument_ServiceDocumentId, T1.ServiceDocument_NeuronDbDocumentId, T1.ServiceDocument_Name, T1.ServiceDocument_DeliveryEMail, T1.ServiceDocument_DeliveryPhone, T1.ServiceDocument_CreatDate, T1.ServiceDocument_PdfFileData, T1.ServiceDocument_ImageData, T1.ServiceDocument_IsImagesInZip, T1.ServiceDocument_IsBlocked, T1.ServiceDocument_FailedTimes, T1.ServiceDocument_IsOpened, T1.ServiceDocument_OpenDate, T1.ServiceDocument_Status, T1.ServiceDocument_PublishId, T1.ServiceDocument_PublishPassword)
    FROM (
        SELECT 
            T.ServiceDocumentId AS ServiceDocument_ServiceDocumentId, 
            T.NeuronDbDocumentId AS ServiceDocument_NeuronDbDocumentId, 
            T.Name AS ServiceDocument_Name, 
            T.DeliveryEMail AS ServiceDocument_DeliveryEMail, 
            T.DeliveryPhone AS ServiceDocument_DeliveryPhone, 
            T.CreatDate AS ServiceDocument_CreatDate, 
            T.PdfFileData AS ServiceDocument_PdfFileData, 
            T.ImageData AS ServiceDocument_ImageData, 
            T.IsImagesInZip AS ServiceDocument_IsImagesInZip, 
            T.IsBlocked AS ServiceDocument_IsBlocked, 
            T.FailedTimes AS ServiceDocument_FailedTimes, 
            T.IsOpened AS ServiceDocument_IsOpened, 
            T.OpenDate AS ServiceDocument_OpenDate, 
            CAST(T.Status AS [NeuronExportedDocuments.DAL.ExportedDocStatus]) AS ServiceDocument_Status, 
            T.PublishId AS ServiceDocument_PublishId, 
            T.PublishPassword AS ServiceDocument_PublishPassword, 
            True AS _from0
        FROM CodeFirstDatabase.ServiceDocument AS T
    ) AS T1]]></view>
  <view extent="CodeFirstDatabase.NLogError"><![CDATA[
    SELECT VALUE -- Constructing NLogError
        [CodeFirstDatabaseSchema.NLogError](T1.NLogError_Id, T1.NLogError_RecordTime, T1.NLogError_Host, T1.NLogError_Type, T1.NLogError_Source, T1.NLogError_Message, T1.NLogError_Level, T1.NLogError_Logger, T1.NLogError_Stacktrace, T1.NLogError_AllXml, T1.NLogError_TimeStamp)
    FROM (
        SELECT 
            T.Id AS NLogError_Id, 
            T.RecordTime AS NLogError_RecordTime, 
            T.Host AS NLogError_Host, 
            T.Type AS NLogError_Type, 
            T.Source AS NLogError_Source, 
            T.Message AS NLogError_Message, 
            T.Level AS NLogError_Level, 
            T.Logger AS NLogError_Logger, 
            T.Stacktrace AS NLogError_Stacktrace, 
            T.AllXml AS NLogError_AllXml, 
            T.TimeStamp AS NLogError_TimeStamp, 
            True AS _from0
        FROM DocumentContext.NLogErrors AS T
    ) AS T1]]></view>
  <view extent="DocumentContext.NLogErrors"><![CDATA[
    SELECT VALUE -- Constructing NLogErrors
        [NeuronExportedDocuments.DAL.NLogError](T1.NLogError_Id, T1.NLogError_RecordTime, T1.NLogError_Host, T1.NLogError_Type, T1.NLogError_Source, T1.NLogError_Message, T1.NLogError_Level, T1.NLogError_Logger, T1.NLogError_Stacktrace, T1.NLogError_AllXml, T1.NLogError_TimeStamp)
    FROM (
        SELECT 
            T.Id AS NLogError_Id, 
            T.RecordTime AS NLogError_RecordTime, 
            T.Host AS NLogError_Host, 
            T.Type AS NLogError_Type, 
            T.Source AS NLogError_Source, 
            T.Message AS NLogError_Message, 
            T.Level AS NLogError_Level, 
            T.Logger AS NLogError_Logger, 
            T.Stacktrace AS NLogError_Stacktrace, 
            T.AllXml AS NLogError_AllXml, 
            T.TimeStamp AS NLogError_TimeStamp, 
            True AS _from0
        FROM CodeFirstDatabase.NLogError AS T
    ) AS T1]]></view>
</views>