@using System.Globalization
@using NeuronExportedDocuments.Models.Enums
@using PagedList.Mvc;
@using NeuronExportedDocuments.Resources
@using NeuronExportedDocuments.Infrastructure
@model NeuronExportedDocuments.Models.ViewModels.DocumentsViewModel

@{
    ViewBag.Title = MainMessages.rs_AdminPanel;
    Layout = "~/Views/_AdminLayout.cshtml";
}


@section Scripts {
    <script type="text/javascript">
        $(function() {
            moment.locale('ru');
            $('#startCreateDate').datetimepicker({
                format: 'DD.MM.YYYY'
            });
            $('#endCreateDate').datetimepicker({
                format: 'DD.MM.YYYY'
            });
            $("#startCreateDate").on("dp.change", function(e) {
                $('#endCreateDate').data("DateTimePicker").minDate(e.date);
            });
            $("#endCreateDate").on("dp.change", function(e) {
                $('#startCreateDate').data("DateTimePicker").maxDate(e.date);
            });
        });
    </script>
    
    <script type="text/javascript">
        $(document).ready(function() {
            $('.info-doc').click(function() {
                var id = $(this).attr('data-id');
                $.ajax({
                    url: '@Url.Action("DocumentAdminInfo")', // to get the right path to controller from TableRoutes of Asp.Net MVC
                    dataType: "html",
                    type: "GET", //to do a post request
                    contentType: 'application/html; charset=utf-8',
                    cache: false,
                    data: { id: id }, // here you can pass arguments to your request if you need
                    success: function(data) {
                        $('#info-container').html(data);
                        $('#modal-form').modal('show');
                    },
                    error: function(xhr, status) {
                        alert(status);
                    }
                });
            });
        });
    </script>

    <script type="text/javascript">
        $(document).ready(function() {
            $('.republish-doc').click(function() {
                var confirmRoute = { id: $(this).attr('data-confirm-id'), action: $(this).attr('data-confirm-action'), controller: $(this).attr('data-confirm-controller') };
                var confirmCaption = '@MainMessages.rs_ConfirmCaption';
                var backUrl = '@Html.Raw(Request.Url.PathAndQuery)';
                var confirmMessage;
                if ($(this).attr('data-blocked') == "true") {
                    confirmMessage = '@MainMessages.rs_UnblockAndRepublishDocumentConfirm';
                } else {
                    confirmMessage = '@MainMessages.rs_RepublishDocumentConfirm';
                }
                $.ajax({
                    url: '@Url.Action("ConfirmDialog")', // to get the right path to controller from TableRoutes of Asp.Net MVC
                    dataType: "html",
                    type: "GET", //to do a post request
                    contentType: 'application/html; charset=utf-8',
                    cache: false,
                    data: { confirmRoute: confirmRoute, confirmCaption: confirmCaption, confirmMessage: confirmMessage, backUrl: backUrl }, // here you can pass arguments to your request if you need
                    success: function(data) {
                        $('#info-container').html(data);
                        $('#modal-form').modal('show');
                    },
                    error: function(xhr, status) {
                        alert(status);
                    }
            });
        });
    });
    </script>



}
@section Body {
    <div class="modal fade" id="modal-form" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content" id="info-container">
            </div>
        </div>
    </div>  
    @using (Html.BeginForm("Documents", "Admin", FormMethod.Get))
    {
        <div class="" m>
            <div class='col-lg-2'>
                <div class="form-group">
                    <div class='input-group date' id='startCreateDate'>
                        @Html.TextBoxFor(m => m.Filter.CreateDateStart, new { @class = "form-control", autocomplete = "off" })
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                    </div>
                </div>
            </div>
            <div class='col-lg-2'>
                <div class="form-group">
                    <div class='input-group date' id='endCreateDate'>
                        @Html.TextBoxFor(m => m.Filter.CreateDateEnd, new { @class = "form-control", autocomplete = "off" })
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                    </div>
                </div>
            </div>

            <div class="col-lg-2">
                @Html.DropDownListFor(m => m.Filter.BlockFilter, Model.GetBlockFilterList(), new { @class = "form-control", aria_label = "..." })
            </div>
            <div class="col-lg-2">
                @Html.DropDownListFor(m => m.Filter.OpenFilter, Model.GetOpenFilterList(), new { @class = "form-control", aria_label = "..." })
            </div>
            <div class="col-lg-3">
                @Html.TextBoxFor(m => m.Filter.PublishIdFilter, new { @class = "form-control", aria_label = "...", placeholder = MainMessages.rs_PublishIdFilter })
            </div>
            <div class="col-lg-1">
                <button type="submit" class="btn btn-default">@MainMessages.rs_Search</button>
            </div>
        </div>
    }

    <table class="table table-striped">
        <tr>
            <th>
                @MainMessages.rs_DocumentCreatDate
            </th>
            <th>
                @MainMessages.rs_DocumentStatus
            </th>
            <th class="text-center">
                @MainMessages.rs_DocumentIsBlocked
            </th>
            <th>
                @MainMessages.rs_DocumentFailedTimes
            </th>
            <th class="text-center">
                @MainMessages.rs_DocumentIsOpened
            </th>
            <th>
                @MainMessages.rs_DocumentOpenDate
            </th>
            <th>
                @MainMessages.rs_DocumentPublishId
            </th>
            <th class="text-center"></th>
        </tr>


        @foreach (var item in Model.List)
        {
        <tr>
            <td class="col-md-1">
                @Html.DisplayFor(modelItem => item.CreatDate)
            </td>
            <td class="col-md-2">
                @NeuronWebConverter.ExportedDocStatusToSting(item.Status)
            </td>
            <td class="col-md-1 text-center">
                @Html.DisplayFor(modelItem => item.IsBlocked)
            </td>
            <td class="col-md-1">
                @Html.DisplayFor(modelItem => item.FailedTimes)
            </td>
            <td class="col-md-1 text-center">
                @Html.DisplayFor(modelItem => item.IsOpened)
            </td>
            <td class="col-md-1">
                @Html.DisplayFor(modelItem => item.OpenDate)
            </td>
            <td class="col-md-1">
                @Html.DisplayFor(modelItem => item.PublishId)
            </td>

            <td class="col-md-1 text-center">
                <button class="glyphicon glyphicon-info-sign btn btn-primary info-doc" data-id="@item.ServiceDocumentId"></button>
                @if (item.Status == ExportedDocStatus.InfoSented)
                {
                    <button class="glyphicon glyphicon-send btn btn-primary republish-doc" data-confirm-id=@item.ServiceDocumentId data-confirm-action="UnblockAndRepublishDocument" data-confirm-controller="Admin" data-blocked=@item.IsBlocked></button>
                }
            </td>

        </tr>
        }

    </table>
    @if (Model.List.PageCount > 1)
    {
        <br />
        <div>@MainMessages.rs_Page @(Model.List.PageCount < Model.List.PageNumber ? 0 : Model.List.PageNumber) of @Model.List.PageCount</div>

        @Html.PagedListPager(Model.List, page => Url.Action("Documents", new
   {
       page,
       blockFilter = (int)Model.Filter.BlockFilter,
       openFilter = (int)Model.Filter.OpenFilter,
       publishIdFilter = Model.Filter.PublishIdFilter,
       logStartDateTime = Model.Filter.CreateDateStart.ToString(CultureInfo.GetCultureInfo("ru-RU")),
       logEndDateTime = Model.Filter.CreateDateEnd.ToString(CultureInfo.GetCultureInfo("ru-RU"))
   }));
    }
}
